[tool.poetry]
name = "pyaspeller"
version = "2.0.0"
description = "Search tool typos in the text, files and websites."
authors = [
    "Vasiliy Taranov <taranov.vv@gmail.com>",
]
license = "Apache 2"
readme = "README.md"
homepage = "https://github.com/oriontvv/pyaspeller"
repository = "https://github.com/oriontvv/pyaspeller"
documentation = "https://github.com/oriontvv/pyaspeller"
keywords = [
    "spell",
    "spelling",
    "spellcheck",
    "api",
    "yandex",
    "text",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python :: 3",
    "Topic :: Text Processing :: Linguistic"
]
packages = [
    { include = "pyaspeller", from = "src" }
]

[tool.poetry.scripts]
pyaspeller = "src.pyaspeller.__init__:main"

[tool.poetry.dependencies]
python = "^3.7"
requests = "^2.27.1"

[tool.poetry.dev-dependencies]
coveralls = { version = "^3.3.1", extras = [ "toml" ]}
mypy = "^1.4"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-deadfixtures = "^2.2.1"
requests-mock = "^1.11.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"

[build-system]
requires = [
    "poetry>=0.12",
]
build-backend = "poetry.masonry.api"

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
ignore = [
    "ANN101",
    "N801",
    "N802",
    "N803",
]
line-length = 120
select = [
    "ANN",
    "E",
    "ERA",
    "F",
    "N",
    "Q",
    "TID",
    "W",
]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
ignore_missing_imports = true
